name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest --strip header
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

  build-binaries:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: moonriver
            asset_name: moonriver-x86_64-unknown-linux-gnu
          # Linux x86_64 musl (static)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: moonriver
            asset_name: moonriver-x86_64-unknown-linux-musl
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: moonriver
            asset_name: moonriver-aarch64-unknown-linux-gnu
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: moonriver
            asset_name: moonriver-x86_64-apple-darwin
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: moonriver
            asset_name: moonriver-aarch64-apple-darwin
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: moonriver.exe
            asset_name: moonriver-x86_64-pc-windows-msvc.exe
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'set man-db/auto-update false' | sudo debconf-communicate
          sudo dpkg-reconfigure man-db
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ../../..

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.zip ../../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          retention-days: 1

  build-deb:
    name: Build Debian Package for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary first
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Build deb package
        run: cargo deb --target ${{ matrix.target }} --no-build --no-strip

      - name: Find deb package
        id: find_deb
        run: |
          DEB_PATH=$(find target/${{ matrix.target }}/debian -name "*.deb" | head -n 1)
          DEB_NAME=$(basename $DEB_PATH)
          echo "deb_path=$DEB_PATH" >> $GITHUB_OUTPUT
          echo "deb_name=$DEB_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.target }}
          path: ${{ steps.find_deb.outputs.deb_path }}
          retention-days: 1

  create-release:
    name: Create Release with Changelog
    needs: [changelog, build-binaries, build-deb]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create and Publish Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ needs.changelog.outputs.release_body }}
          draft: false
          prerelease: false
          files: artifacts/**/*
